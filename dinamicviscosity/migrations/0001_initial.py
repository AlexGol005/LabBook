# Generated by Django 4.0.4 on 2022-07-06 15:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('jouViscosity', '0002_alter_cvdensitydinamicvg_namelot_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dinamicviscosity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exp', models.IntegerField(blank=True, null=True, verbose_name='Срок годности плотности, месяцев')),
                ('date_exp', models.DateField(blank=True, null=True, verbose_name='плотность годна до')),
                ('date', models.DateField(auto_now_add=True, db_index=True, verbose_name='Дата')),
                ('name', models.CharField(blank=True, default='0', max_length=100, null=True, verbose_name='Наименование')),
                ('lot', models.CharField(blank=True, max_length=100, null=True, verbose_name='Партия')),
                ('constit', models.CharField(blank=True, choices=[('да', 'Проба содержит октол/нефть'), ('нет', 'В пробе нет октола/нефти'), ('другое', 'другое')], default='Проба содержит октол/нефть', max_length=300, null=True, verbose_name='Состав пробы')),
                ('ndocument', models.CharField(blank=True, choices=[('МИ-02-2018', 'МИ-02-2018')], default='МИ-02-2018', max_length=100, verbose_name='Метод испытаний')),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, default='0', max_digits=5, null=True, verbose_name='Температура, ℃')),
                ('piknometer_volume', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='Объём пикнометра, мл')),
                ('piknometer_mass1', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='Масса пикнометра 1, г')),
                ('piknometer_mass2', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='Масса пикнометра 2, г')),
                ('piknometer_plus_SM_mass1', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='Масса пикнометра + СО -  1, г')),
                ('piknometer_plus_SM_mass2', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='Масса пикнометра + СО -  2, г')),
                ('SM_mass1', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='Масса СО -  1, г')),
                ('SM_mass2', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='Масса СО -  2, г')),
                ('density1', models.DecimalField(blank=True, decimal_places=5, max_digits=7, null=True, verbose_name='плотность 1, г/мл')),
                ('density2', models.DecimalField(blank=True, decimal_places=5, max_digits=7, null=True, verbose_name='плотность 2, г/мл')),
                ('density_avg', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, verbose_name='средняя плотность, г/мл')),
                ('delta', models.CharField(blank=True, max_length=100, null=True, verbose_name='Не превышает Δ')),
                ('kriteriy', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, verbose_name='Критерий приемлемости измерений')),
                ('kinematicviscosity', models.CharField(blank=True, max_length=300, null=True, verbose_name='Кинематическая вязкость при температуре измерений сСт')),
                ('dinamicviscosity_not_rouned', models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True, verbose_name='Динамическая вязкость неокругленная')),
                ('relerror', models.DecimalField(blank=True, decimal_places=1, default=0.3, max_digits=3, null=True, verbose_name='Относительная  погрешность')),
                ('certifiedValue', models.CharField(blank=True, max_length=300, null=True, verbose_name='Аттестованное значение динамической вязкости')),
                ('resultMeas', models.CharField(blank=True, default='неудовлетворительно', max_length=100, null=True, verbose_name='Результат измерений уд/неуд')),
                ('cause', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='Причина')),
                ('accMeasurement', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, verbose_name='Оценка приемлемости измерений плотности')),
                ('abserror', models.CharField(blank=True, max_length=300, null=True, verbose_name='Абсолютная  погрешность')),
                ('olddensity', models.CharField(blank=True, default='', max_length=300, null=True, verbose_name='Предыдущее значение плотности')),
                ('deltaolddensity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Оценка разницы с предыдущим значением плотности')),
                ('resultWarning', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('fixation', models.BooleanField(blank=True, default=False, null=True, verbose_name='Внесен ли результат в Журнал аттестованных значений?')),
                ('equipment', models.CharField(blank=True, choices=[('денсиметром', 'денсиметром'), ('пикнометром', 'пикнометром')], default='денсиметром', max_length=300, null=True, verbose_name='Способ измерения плотности')),
                ('resultWarningkinematic', models.CharField(blank=True, max_length=300, null=True, verbose_name='Если нет кинематики')),
                ('kinematicviscositydead', models.DateField(blank=True, null=True, verbose_name='кинематика годна до:')),
                ('havedensity', models.BooleanField(blank=True, default=False, verbose_name='Есть значение плотности, измеренное ранее')),
                ('densitydead', models.DateField(blank=True, null=True, verbose_name='Плотность, измеренная ранее, годна до:')),
                ('for_lot_and_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='jouViscosity.lotvg', verbose_name='Измерение для: ГСО и партия')),
                ('performer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performer', to=settings.AUTH_USER_MODEL)),
                ('performerdensity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performerdensity', to=settings.AUTH_USER_MODEL, verbose_name='Плотность измерил')),
            ],
            options={
                'verbose_name': 'Динамика и плотность: аттестация',
                'verbose_name_plural': 'Динамика и плотность: аттестация',
            },
        ),
        migrations.CreateModel(
            name='CommentsDinamicviscosity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, db_index=True, verbose_name='Дата')),
                ('name', models.TextField(default='', max_length=1000, verbose_name='Содержание')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Наименование')),
                ('forNote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='dinamicviscosity.dinamicviscosity', verbose_name='К странице аттестации')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['-pk'],
            },
        ),
    ]
